Doporučení: 
použij winSCP pro praci se soubory

Pro vytvoření tohoto postupu jsem čerpal z článku:
https://medium.com/@thishantha17/build-a-simple-python-rest-api-with-apache2-gunicorn-and-flask-on-ubuntu-18-04-c9d47639139b
---------------------------------------------------------------------------------
1 
Vytvoř novou složku kde bude aplikace

mkdir Aplikace

---------------------------------------------------------------------------------
2 
vytvoření venv

python3 -m venv venv

---------------------------------------------------------------------------------
3 
aktivace venv

source venv/bin/activate

příkaz which python3 musí ukázat cestu směčující do venv/bin/python3, pokud ne tak je zapotřebí venv smazat a opět vytvořit
---------------------------------------------------------------------------------
4 
instalace modulů
pip install --upgrade pip

#instalece ve specifikace verzí která je v souboru
pip install --no-deps -r <(sed 's/[=<>].*//' requirements.txt)

pip install -r requirements.txt

---------------------------------------------------------------------------------
5 
vytvořit/kopírování app.py a další souboru aplikace

---------------------------------------------------------------------------------
6 
instalace a konfigurace a spusteni gunicorn

pip install gunicorn

---------------------------------------------------------------------------------
7 
vytvoř soubor wsgi.py ve složce flask aplikace
------------SOUBOR-----------------
------------SOUBOR-----------------
------------SOUBOR-----------------

from app import app

if __name__ == '__main__':
	app.run()
------------konec-----------------
------------konec-----------------
------------konec-----------------

7b
vytvoř prázný soubor __init__.py


---------------------------------------------------------------------------------
8 
vypni venv
deactivate

---------------------------------------------------------------------------------
9 
vytvoření gunicorn konfigurace 'gunicorn_config.py'
------------SOUBOR-----------------
------------SOUBOR-----------------
------------SOUBOR-----------------

import multiprocessing

workers = multiprocessing.cpu_count() * 2 + 1
bind = 'unix:get_guest_info.sock'
umask = 0o007
reload = True

#logging
accesslog = '-'
errorlog = '-'
------------konec-----------------
------------konec-----------------
------------konec-----------------

---------------------------------------------------------------------------------
10. 
vytvoření souboru který bude automaticky startovat gunicorn při resetu serveru

### uprav jmeno aplikace v nazvu souboru
sudo nano /etc/systemd/system/get_guest_info.service

### uprav cesty podle aktualni aplikace
### uprav jmeno uzivatele 

------------SOUBOR-----------------
------------SOUBOR-----------------
------------SOUBOR-----------------

[Unit]
Description=Gunicorn instance to serve flask application
After=network.target

[Service]
User=peta
Group=www-data
WorkingDirectory=/home/peta/get_guest_info/web_app
Environment="PATH=/home/peta/get_guest_info/web_app/venv/bin"
ExecStart=/home/peta/get_guest_info/web_app/venv/bin/gunicorn --config gunicorn_config.py wsgi:app

[Install]
WantedBy=multi-user.target

------------konec-----------------
------------konec-----------------
------------konec-----------------

po změně souboru přenačti data: 
systemctl daemon-reload

---------------------------------------------------------------------------------
11.
nastartuj a povol právě vytvořenou službu

sudo systemctl start get_guest_info.service
sudo systemctl enable get_guest_info.service

---------------------------------------------------------------------------------
12.
zkontroluj zda servis běží

sudo systemctl status get_guest_info.service

výpis logu z gunicorn
sudo journalctl -u get_guest_info.service --no-pager --lines=50

---------------------------------------------------------------------------------
13.
Konfigurace Apache2 jako reverse proxy

vytvoř soubor pro konfiguraci
sudo nano /etc/apache2/sites-available/get_guest_info.conf


### uprav cesty, ServerAdmin, ServerName, ServerAlis, 

------------SOUBOR-----------------
------------SOUBOR-----------------
------------SOUBOR-----------------

<VirtualHost *:80>
        ServerAdmin petr@kopeckysolution.com
        ServerName homevibes.cz
        ServerAlias www.homevibes.cz

        ErrorLog ${APACHE_LOG_DIR}/get_guest_info-error.log
        CustomLog ${APACHE_LOG_DIR}/get_guest_info-access.log combined

        <Location />
                ProxyPass unix:/home/peta/get_guest_info/web_app/get_guest_info.sock|http://127.0.0.1/
                ProxyPassReverse unix:/home/peta/get_guest_info/web_app/get_guest_info.sock|http://127.0.0.1/
	</Location>
</VirtualHost>

<VirtualHost *:443>
	ServerAdmin petr@kopeckysolution.com
	ServerName homevibes.cz
	ServerAlias www.homevibes.cz

	# Cesta k SSL certifikátům
	SSLEngine on
	SSLCertificateFile '/etc/letsencrypt/live/hv.kopeckysolution.com/fullchain.pem'
	SSLCertificateKeyFile '/etc/letsencrypt/live/hv.kopeckysolution.com/privkey.pem'

	ErrorLog ${APACHE_LOG_DIR}/get_guest_info-error.log
	CustomLog ${APACHE_LOG_DIR}/get_guest_info-access.log combined

	<Location />
        	ProxyPass unix:/home/peta/get_guest_info/web_app/get_guest_info.sock|http://127.0.0.1/
        	ProxyPassReverse unix:/home/peta/get_guest_info/web_app/get_guest_info.sock|http://127.0.0.1/
	</Location>
</VirtualHost>

------------konec-----------------
------------konec-----------------
------------konec-----------------
---------------------------------------------------------------------------------
14.
Nyní povol vytvořenou konfiguraci

sudo a2ensite get_guest_info.conf

---------------------------------------------------------------------------------
15.
resetovani Apache

sudo systemctl reload apache2

---------------------------------------------------------------------------------
16.
v souboru /etc/apache2apache2.conf by mělo být: 

ServerName homevibes.cz

---------------------------------------------------------------------------------
17.
pravděpodobně bude zapotřebí dát práva uživateli pod kterým běží flask aplikace do složky kde je uložena aplikace

Nastavení vlastníka složky aplikace
Předpokládejme, že Flask aplikace je ve složce /home/peta/get_guest_info/.

Změňte vlastníka složky na uživatele, pod kterým běží server (např. www-data):
sudo chown -R www-data:www-data /home/peta/get_guest_info

Umožněte čtení a zápis pro vlastníka a skupinu:
sudo chmod -R 775 /home/peta/get_guest_info

A pokud chcete, aby všechny nové soubory ve složce automaticky dědily správná oprávnění, nastavte setgid bit:
sudo chmod g+s /home/peta/get_guest_info
 
Pokud chcete mít přístup k souborům i jako uživatel peta, přidejte ho do skupiny www-data:
sudo usermod -aG www-data peta

Poté se odhlaste a znovu přihlaste, aby se změny projevily.

Zkontrolujte oprávnění:
ls -ld /home/peta/get_guest_info

Mělo by to vypadat takto:
drwxrwxr-x 10 peta www-data 4096 Feb 7 16:30 /home/get_gest_info

Tímto způsobem zajistíte, že Flask bude mít čtení i zápis do složky aplikace a zároveň si ponecháte kontrolu nad soubory.

---------------------------------------------------------------------------------
18. reset gunicorn
sudo systemctl restart apache2
---------------------------------------------------------------------------------



---------------------------------------------------------------------------------
--------Send Link-------------------------------------------------------------------------
--------Send Link-------------------------------------------------------------------------
--------Send Link-------------------------------------------------------------------------
---------------------------------------------------------------------------------
100
vytvoření venv
python3 -m venv venv

aktivace venv
source venv/bin/activate

#instalece ve specifikace verzí která je v souboru
pip install --no-deps -r <(sed 's/[=<>].*//' requirements.txt)

instalace modulů
pip install -r requirements.txt



101. 
Vytvoření souboru který zajistí že aplikace sendlink.py se bude sama spouště pokud nepoběží
Vytvoření systemd služby
Nejprve vytvořte systemd službu pro aplikaci.

sudo nano /etc/systemd/system/send_link.service

####Obsah souboru (přizpůsobte cestu k aplikaci):

------------SOUBOR-----------------
------------SOUBOR-----------------
------------SOUBOR-----------------
[Unit]
Description=Application send_link.py
After=network.target

[Service]
User=peta
Group=www-data
WorkingDirectory=/home/peta/get_guest_info/send_link
ExecStart=/home/peta/get_guest_info/send_link/venv/bin/python /home/peta/get_guest_info/send_link/send_link.py
Restart=always
RestartSec=5
KillMode=process
StandardOutput=append:/home/peta/get_guest_info/send_link/logs/send_link.log
StandardError=append:/home/peta/get_guest_info/send_link/logs/send_link-error.log

[Install]
WantedBy=multi-user.target

------------konec-----------------
------------konec-----------------
------------konec-----------------

101b.
vytvoř soubory pro logy:
sudo nano /home/peta/get_guest_info/send_link/logs/send_link.log
sudo nano /home/peta/get_guest_info/send_link/logs/send_link-error.log




---------------------------------------------------------------------------------
102.
Aktivace služby
Po vytvoření souboru spusťte následující příkazy:

🔹 Načtení změn systemd:
sudo systemctl daemon-reload

ruční spustění ve venv(napiš do jednoho řádku s mezerou mezi adresama):
/home/peta/get_guest_info/send_link/venv/bin/python /home/peta/get_guest_info/send_link/send_link.py
/var/www/clients/client1/web26/web/get_guest_info/send_link/venv/bin/python /var/www/clients/client1/web26/web/get_guest_info/send_link/send_link.py


🔹 Spuštění služby:
sudo systemctl start send_link.service


🔹 Povolení automatického startu při bootování:
sudo systemctl enable send_link.service

🔹 Kontrola, zda běží:
sudo systemctl status send_link.service
*************************************************

kontrola logu:
tail -f /var/www/clients/client1/web26/web/get_guest_info/send_link/send_link.log



3. Automatický restart při pádu
Systemd už je nastaven na automatický restart pomocí:
Restart=always
RestartSec=5
Pokud se aplikace z nějakého důvodu ukončí, systemd ji do 5 sekund znovu spustí.

4. Další užitečné příkazy
🔹 Ruční restart aplikace:
sudo systemctl restart sendlink

🔹 Zastavení služby:
sudo systemctl stop sendlink

🔹 Zakázání automatického startu:
sudo systemctl disable sendlink

🔹 Zobrazení logů aplikace:
journalctl -u sendlink -f

5. Test, zda služba správně restartuje
Pokud chcete otestovat, zda se služba automaticky restartuje, zkuste ji násilně ukončit:

sudo pkill -f sendlinksendlink.py
Během několika sekund by se aplikace měla automaticky znovu spustit.

Tímto způsobem zajistíte, že vaše Python aplikace poběží automaticky po startu systému a pokud spadne, systemd ji automaticky restartuje. 


-----užitečné příkazy----------------
sudo service apache2 restart
sudo systemctl status apache2
sudo systemctl restart gunicorn
sudo systemctl status gunicorn

/var/log/apache2/error.log
/var/log/apache2/access.log

sudo tail -f /var/log/apache2/error.log
sudo tail -f /var/log/apache2/error_ssl.log
sudo tail -f /var/log/gunicorn/error.log

sudo journalctl -u gunicorn

sudo systemctl daemon-reload
sudo systemctl start app1
sudo systemctl enable app1
